{"version":3,"sources":["webpack:///./src/components/page/Markdown/index.ts","webpack:///./src/components/docs/TableOfContents/TocWrapper.tsx","webpack:///./src/components/docs/TableOfContents/TocFloatingButton.tsx","webpack:///./src/templates/faq-page.tsx","webpack:///./src/components/docs/BackToTopButton/BackToTopButton.tsx","webpack:///./src/components/docs/DocsContribution/DocsContribution.tsx"],"names":["TocWrapper","styled","breakpoints","xl","dimensions","heights","header","colors","white","layerIndexes","overlay","props","isOpen","lg","dialog","grey02","space","xs","grey04","grey07","red06","blue06","FAQPageTemplate","data","React","useState","tocIsOpen","setTocIsOpen","markdownRemark","site","siteMetadata","navHidden","docsPage","frontmatter","title","name","content","excerpt","property","hasToc","tableOfContents","onClick","dangerouslySetInnerHTML","__html","subtitle","description","renderAst","htmlAst","version","siteLastUpdated","socials","href","query","Wrapper","Inner","BackToTopButton","className","aria-label","width","height","viewBox","fill","xmlns","d","DocsContribution","edges","slug","mt","pt","undefined","Fragment","size","mb","target","rel","node","gitRemote","webLink","ref","substring","lastIndexOf","Box"],"mappings":"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","file":"component---src-templates-faq-page-tsx-93fcedc846ab69efdac4.js","sourcesContent":["export { default as MarkdownContent } from './MarkdownContent';\r\n","import styled from 'styled-components';\r\nimport { dimensions, breakpoints, colors, layerIndexes, space } from 'utils/variables';\r\n\r\ninterface ToggleableProps {\r\n  isOpen?: boolean;\r\n}\r\n\r\nconst TocWrapper = styled('section')<ToggleableProps>`\r\n  display: block;\r\n  margin-left: 24px;\r\n  font-size: 13px;\r\n\r\n  @media (min-width: ${breakpoints.xl}px) {\r\n    flex: 0 0 240px;\r\n    position: sticky;\r\n    top: ${dimensions.heights.header + 32}px;\r\n    max-height: calc(100vh - ${dimensions.heights.header + 32}px);\r\n    overflow-y: auto;\r\n  }\r\n\r\n  @media (max-width: ${breakpoints.xl - 1}px) {\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    width: 100%;\r\n    height: 100vh;\r\n    margin-left: 0;\r\n    margin-top: ${dimensions.heights.header}px;\r\n    padding: 24px;\r\n    background-color: ${colors.white};\r\n    z-index: ${layerIndexes.overlay - 5};\r\n    visibility: ${props => (props.isOpen ? 'visible' : 'hidden')};\r\n    opacity: ${props => (props.isOpen ? 1 : 0)};\r\n    transform: ${props => (props.isOpen ? 'translateY(0)' : 'translateY(64px)')};\r\n    transition: visibility 0.3s ease, opacity 0.3s ease, transform 0.3s ease;\r\n    overflow-y: auto;\r\n  }\r\n\r\n  @media (min-width: ${breakpoints.lg}px) and (max-width: ${breakpoints.xl - 1}px) {\r\n    margin-top: 0;\r\n    z-index: ${layerIndexes.dialog + 1};\r\n  }\r\n\r\n  ul {\r\n    padding-left: 16px;\r\n    border-left: 1px solid ${colors.grey02};\r\n    list-style-type: none;\r\n\r\n    p {\r\n      margin: 0;\r\n    }\r\n\r\n    ul {\r\n      border-left: none;\r\n    }\r\n\r\n    li {\r\n      margin: ${space.xs}px 0;\r\n    }\r\n  }\r\n\r\n  a {\r\n    color: ${colors.grey04};\r\n    text-decoration: none;\r\n\r\n    &:hover,\r\n    &:focus {\r\n      color: ${colors.grey07};\r\n    }\r\n  }\r\n`;\r\n\r\nexport default TocWrapper;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { colors, layerIndexes, breakpoints } from 'utils/variables';\r\n\r\ninterface ToggleableProps {\r\n  isOpen?: boolean;\r\n}\r\n\r\nconst Wrapper = styled('button')<ToggleableProps>`\r\n  display: inline-block;\r\n  position: fixed;\r\n  bottom: 24px;\r\n  right: 24px;\r\n  padding: 0;\r\n  background-color: ${props => (props.isOpen ? colors.red06 : colors.blue06)};\r\n  color: ${colors.white};\r\n  cursor: pointer;\r\n  z-index: ${layerIndexes.overlay - 1};\r\n  border-radius: 50%;\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  box-shadow: 0 2px 4px 1px rgba(0, 0, 0, 0.15);\r\n\r\n  &:hover,\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n\r\n  @media (min-width: ${breakpoints.lg}px) and (max-width: ${breakpoints.xl - 1}px) {\r\n    z-index: ${layerIndexes.dialog + 2};\r\n  }\r\n\r\n  @media (min-width: ${breakpoints.xl}px) {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst Inner = styled('div')<ToggleableProps>`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 60px;\r\n  height: 60px;\r\n\r\n  &.is-open {\r\n    & svg {\r\n      transform: rotate(180deg);\r\n    }\r\n  }\r\n`;\r\n\r\ninterface TocFloatingButtonProps {\r\n  className?: string;\r\n  tocIsOpen?: boolean;\r\n  onClick?: (e?: React.MouseEvent<HTMLButtonElement>) => void;\r\n}\r\n\r\nconst TocFloatingButton: React.SFC<TocFloatingButtonProps> = ({ className, tocIsOpen, onClick }) => (\r\n  <Wrapper className={className} onClick={onClick} isOpen={tocIsOpen} aria-label=\"Toggle Table of Contents\">\r\n    <Inner isOpen={tocIsOpen} className={tocIsOpen ? 'is-open' : undefined}>\r\n      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path\r\n          d=\"M4.71 16.71L12 9.41L19.29 16.71C19.383 16.8037 19.4936 16.8781 19.6154 16.9289C19.7373 16.9797 19.868 17.0058 20 17.0058C20.132 17.0058 20.2627 16.9797 20.3846 16.9289C20.5064 16.8781 20.617 16.8037 20.71 16.71C20.8037 16.617 20.8781 16.5064 20.9289 16.3846C20.9797 16.2627 21.0058 16.132 21.0058 16C21.0058 15.868 20.9797 15.7373 20.9289 15.6154C20.8781 15.4936 20.8037 15.383 20.71 15.29L12.71 7.29C12.617 7.19627 12.5064 7.12188 12.3846 7.07111C12.2627 7.02034 12.132 6.9942 12 6.9942C11.868 6.9942 11.7373 7.02034 11.6154 7.07111C11.4936 7.12188 11.383 7.19627 11.29 7.29L3.29 15.29C3.1017 15.4783 2.99591 15.7337 2.99591 16C2.99591 16.2663 3.1017 16.5217 3.29 16.71C3.47831 16.8983 3.7337 17.0041 4 17.0041C4.2663 17.0041 4.5217 16.8983 4.71 16.71Z\"\r\n          fill={colors.white}\r\n        />\r\n      </svg>\r\n    </Inner>\r\n  </Wrapper>\r\n);\r\n\r\nexport default TocFloatingButton;\r\n","import React from 'react';\r\nimport { graphql } from 'gatsby';\r\nimport { Helmet } from 'react-helmet';\r\nimport { RouteComponentProps } from '@reach/router';\r\n\r\nimport { SiteMetadata } from 'interfaces/gatsby';\r\n\r\nimport { Page } from 'components/layout/Page';\r\nimport { Container } from 'components/layout/Container';\r\nimport { DocsWrapper } from 'components/docs/DocsWrapper';\r\nimport { DocsHeader } from 'components/docs/DocsHeader';\r\nimport { MarkdownContent } from 'components/page/Markdown';\r\n\r\nimport { FooterWrapper, Footer } from 'components/layout/Footer';\r\nimport { TocWrapper } from 'components/docs/TableOfContents';\r\nimport IndexLayout from 'layouts';\r\nimport renderAst from 'utils/renderAst';\r\nimport { DocsContribution } from 'components/docs/DocsContribution';\r\nimport { BackToTopButton } from 'components/docs/BackToTopButton';\r\n\r\ninterface FAQPageTemplateProps extends RouteComponentProps {\r\n  data: {\r\n    site: {\r\n      siteMetadata: SiteMetadata;\r\n    };\r\n    markdownRemark: {\r\n      htmlAst: any;\r\n      tableOfContents: string;\r\n      excerpt: string;\r\n      frontmatter: {\r\n        id: string;\r\n        title: string;\r\n        description?: string;\r\n        prev?: string;\r\n        next?: string;\r\n      };\r\n    };\r\n  };\r\n}\r\n\r\nconst FAQPageTemplate: React.SFC<FAQPageTemplateProps> = ({ data }) => {\r\n  const [tocIsOpen, setTocIsOpen] = React.useState(false);\r\n  const { markdownRemark, site } = data;\r\n  const { siteMetadata } = site;\r\n\r\n  return (\r\n    <IndexLayout navHidden>\r\n      <Page docsPage>\r\n        <Helmet>\r\n          <title>\r\n            {markdownRemark.frontmatter.title} &middot; {site.siteMetadata.title}\r\n          </title>\r\n          <meta name=\"description\" content={markdownRemark.excerpt} />\r\n          <meta property=\"og:title\" content={markdownRemark.frontmatter.title} />\r\n          <meta property=\"og:description\" content={markdownRemark.excerpt} />\r\n        </Helmet>\r\n        <DocsWrapper hasToc={!!markdownRemark.tableOfContents}>\r\n          {markdownRemark.tableOfContents && (\r\n            <TocWrapper\r\n              isOpen={tocIsOpen}\r\n              onClick={() => setTocIsOpen(!tocIsOpen)}\r\n              dangerouslySetInnerHTML={{ __html: markdownRemark.tableOfContents }}\r\n            />\r\n          )}\r\n          <Container>\r\n            <DocsHeader title={markdownRemark.frontmatter.title} subtitle={markdownRemark.frontmatter.description} />\r\n            <MarkdownContent>{renderAst(markdownRemark.htmlAst)}</MarkdownContent>\r\n            <DocsContribution />\r\n            <FooterWrapper>\r\n              <Footer\r\n                version={siteMetadata.version}\r\n                siteLastUpdated={siteMetadata.siteLastUpdated}\r\n                socials={siteMetadata.socials}\r\n              />\r\n            </FooterWrapper>\r\n          </Container>\r\n          <BackToTopButton href=\"#\" />\r\n        </DocsWrapper>\r\n      </Page>\r\n    </IndexLayout>\r\n  );\r\n};\r\n\r\nexport default FAQPageTemplate;\r\n\r\nexport const query = graphql`\r\n  query FAQPageTemplateQuery($slug: String!) {\r\n    site {\r\n      siteMetadata {\r\n        title\r\n        sidebarTitle\r\n        sidebarSubtext\r\n        siteLastUpdated\r\n        description\r\n        version\r\n        siteUrl\r\n        keywords\r\n        author {\r\n          name\r\n          url\r\n          email\r\n        }\r\n        socials {\r\n          name\r\n          imgpath\r\n          url\r\n        }\r\n      }\r\n    }\r\n    markdownRemark(fields: { slug: { eq: $slug } }) {\r\n      htmlAst\r\n      tableOfContents\r\n      excerpt\r\n      frontmatter {\r\n        id\r\n        title\r\n        description\r\n        prev\r\n        next\r\n      }\r\n    }\r\n  }\r\n`;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { colors, layerIndexes, breakpoints } from 'utils/variables';\r\n\r\nconst Wrapper = styled('a')`\r\n  display: inline-block;\r\n  position: fixed;\r\n  bottom: 24px;\r\n  right: 24px;\r\n  padding: 0;\r\n  background-color: ${colors.blue06};\r\n  color: ${colors.white};\r\n  cursor: pointer;\r\n  z-index: ${layerIndexes.overlay - 1};\r\n  border-radius: 50%;\r\n  border: 1px solid rgba(255, 255, 255, 0.1);\r\n  box-shadow: 0 2px 4px 1px rgba(0, 0, 0, 0.15);\r\n\r\n  &:hover,\r\n  &:focus {\r\n    outline: none;\r\n  }\r\n\r\n  @media (min-width: ${breakpoints.lg}px) and (max-width: ${breakpoints.xl - 1}px) {\r\n    z-index: ${layerIndexes.dialog + 2};\r\n  }\r\n\r\n  @media (min-width: ${breakpoints.xl}px) {\r\n    display: none;\r\n  }\r\n`;\r\n\r\nconst Inner = styled('div')`\r\n  display: flex;\r\n  flex-direction: row;\r\n  align-items: center;\r\n  justify-content: center;\r\n  width: 60px;\r\n  height: 60px;\r\n`;\r\n\r\ninterface BackToTopButtonProps {\r\n  className?: string;\r\n  href?: string;\r\n}\r\n\r\nconst BackToTopButton: React.SFC<BackToTopButtonProps> = ({ className, href }) => (\r\n  <Wrapper className={className} href={href} aria-label=\"Back to Top\">\r\n    <Inner>\r\n      <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n        <path\r\n          d=\"M4.71 16.71L12 9.41L19.29 16.71C19.383 16.8037 19.4936 16.8781 19.6154 16.9289C19.7373 16.9797 19.868 17.0058 20 17.0058C20.132 17.0058 20.2627 16.9797 20.3846 16.9289C20.5064 16.8781 20.617 16.8037 20.71 16.71C20.8037 16.617 20.8781 16.5064 20.9289 16.3846C20.9797 16.2627 21.0058 16.132 21.0058 16C21.0058 15.868 20.9797 15.7373 20.9289 15.6154C20.8781 15.4936 20.8037 15.383 20.71 15.29L12.71 7.29C12.617 7.19627 12.5064 7.12188 12.3846 7.07111C12.2627 7.02034 12.132 6.9942 12 6.9942C11.868 6.9942 11.7373 7.02034 11.6154 7.07111C11.4936 7.12188 11.383 7.19627 11.29 7.29L3.29 15.29C3.1017 15.4783 2.99591 15.7337 2.99591 16C2.99591 16.2663 3.1017 16.5217 3.29 16.71C3.47831 16.8983 3.7337 17.0041 4 17.0041C4.2663 17.0041 4.5217 16.8983 4.71 16.71Z\"\r\n          fill={colors.white}\r\n        />\r\n      </svg>\r\n    </Inner>\r\n  </Wrapper>\r\n);\r\n\r\nexport default BackToTopButton;\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { colors } from 'utils/variables';\r\nimport { Heading, Paragraph, Box } from 'components/foundations';\r\n\r\nconst DocsContribution: React.SFC = ({edges, slug}) => (\r\n    <Wrapper mt=\"xl\" pt=\"xl\">\r\n    \r\n    {edges && edges[0] != undefined ? \r\n    <React.Fragment>\r\n    <Heading size={500} mt={0} mb=\"sm\">\r\n      Contributing to the Documentation\r\n    </Heading>\r\n      <Paragraph size={400}>\r\n        Is something missing/incorrect? Please let us know by contacting{' '}\r\n        <a href=\"mailto:info@hpccsystems.com\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>info@hpccsystems.com</strong>\r\n        </a>{'. '}      \r\n        If you know how to fix it straight away, don’t hesitate to{' '}\r\n        <a href={edges[0].node.gitRemote.webLink+'/blob/'+edges[0].node.gitRemote.ref + slug.substring(0,slug.lastIndexOf('/'))+'.md'} target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Edit in Github repository\r\n        </a>{' '}\r\n        .\r\n        \r\n      </Paragraph> </React.Fragment>: ''}\r\n  </Wrapper>\r\n);\r\n\r\nexport default DocsContribution;\r\n\r\nconst Wrapper = styled(Box)`\r\n  border-top: 1px solid ${colors.grey02};\r\n\r\n  h2 {\r\n    margin-top: 0;\r\n  }\r\n`;\r\n"],"sourceRoot":""}